<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->

<mapper namespace="com.itheima.mapper.BrandMapper">

    <!--
        数据库表的字段名称和实体类的属性名称不一致，导致不能自动封装数据
        *起别名：对不一样的字段名取别名，让别名和实体类属性名称一样即可
            *缺点：每次查询都要定义一次别名
        <select id="selectAll" resultType="brand">
        select id, brand_name as brandName, company_name as companyName, ordered, description, status
        from tb_brand;
        </select>
            *sql片段解决这个问题
                *sql片段缺点：不灵活
        *resultMap
            1.定义<resultMap>标签
            2.在<select>标签中，使用resultMap属性替换resultType属性
    -->
    <!--   定义sql片段;-->
    <!--    <sql id="brand_column">-->
    <!--        id, brand_name as brandName, company_name as companyName, ordered, description, status-->
    <!--    </sql>-->

    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select-->
    <!--        <include refid="brand_column"/>-->
    <!--        from tb_brand;-->
    <!--    </select>-->

    <!--
        id:唯一标识
        type:映射的类型，支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
        子标签id,result
            id:完成主键字段的映射
                column:表的列名
                property:实体类的属性名
            result:完成一般字段的映射
                column:表的列名
                property:实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--
        *参数占位符
            1.#{}:会将其替换为？，防止sql注入问题
            2.${}:拼sql，存在sql注入问题
            3.使用时机
                *参数传递的时候：#{}
                *表名或者列名不固定的情况下：${},存在sql注入问题
    -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>

    <!--
        *特殊字符处理；
            1.转义字符;
                where id &lt; #{id};  &lt;表示<
            2.CDATA区;
                <![CDATA[ < ]]> 表 <
    -->
    <!--    <select id="selectById" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where id <![CDATA[ < ]]> #{id};-->
    <!--    </select>-->


    <!--    <select id="selectByCondition" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where status = #{status}-->
    <!--          and company_name like #{companyName}-->
    <!--          and brand_name like #{brandName};-->
    <!--    </select>-->

    <!--
        动态条件查询
            *if条件判断
                *test 逻辑表达式
            *问题：
                *1.恒等式 例如1=1
                *使用<where>标签替换where关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName};
            </if>
        </where>
    </select>

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose> <!--类似于switch-->
            <when test="status != null"><!--类似于case-->
                status = #{status}
            </when>
            <when test="companyName != null and companyName != ''">
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''">
                brand_name like #{brandName}
            </when>
            <otherwise><!--类似于default-->
                1=1
            </otherwise>
        </choose>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <update id="update">
        update tb_brand
        set brand_name   = #{brandName},
            company_name = #{companyName},
            ordered      = #{ordered},
            description  = #{description},
            status       = #{status}
        where id = #{id};
    </update>

    <update id="updateDynamic">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName}
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName}
            </if>
            <if test="ordered != null">
                ordered = #{ordered}
            </if>
            <if test="description != null and description != ''">
                description = #{description}
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>

    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>

    <!--
        mybatis会将数组参数封装为一个map集合
            *默认array = 数组   <foreach collection="array" item="id" separator=",">
            *可以使用@Param注解改变map集合的默认key的名称
        separator 分隔符
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id in
        (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        );
    </delete>

</mapper>